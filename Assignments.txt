Assignment1
===========
1.What is Emmet?
Emmet is a web-developer’s toolkit that can greatly improve your HTML & CSS workflow:

Basically, most text editors out there allow you to store and re-use commonly used code chunks, called “snippets”. While snippets are a good way to boost your productivity, all implementations have common pitfalls: you have to define the snippet first and you can’t extend them in runtime.

Emmet takes the snippets idea to a whole new level: you can type CSS-like expressions that can be dynamically parsed, and produce output depending on what you type in the abbreviation. Emmet is developed and optimised for web-developers whose workflow depends on HTML/XML and CSS, but can be used with programming languages too.

Ref: https://docs.emmet.io/
Ref: https://dev.to/josemukorivo/enable-emmet-support-for-react-in-vs-code-2f2c

2.Difference between a Library and Framework?
A library is a collection of functions developers can call at will and still control the flow of the software application. The operations performed to be performed by libraries are precisely and specifically defined.

A framework is a structure in which the application defines the content of the operation by asking the developer to fill in the spaces. The framework defines the concept with the functionality itself is defined by the developer with the end-user in mind.

Frameworks and libraries are code written by third parties to solve regular/common problems or to optimise performance. A key difference between the two is the inversion of control. When using a library, the control remains with the developer who tells the application when to call library functions. When using a framework, the control is reversed, which means that the framework tells the developer where code needs to be provided and calls it as it requires.
Ref:https://www.geeksforgeeks.org/software-framework-vs-library/
Ref:https://kruschecompany.com/framework-vs-library/
Ref:https://www.interviewbit.com/blog/framework-vs-library/

3.What is CDN? Why do we use it?

A content delivery network (CDN) is a group of geographically distributed servers that speed up the delivery of web content by bringing it closer to where users are. Data centers across the globe use caching, a process that temporarily stores copies of files, so that you can access internet content from a web-enabled device or browser more quickly through a server near you. CDNs cache content like web pages, images, and video in proxy servers near to your physical location. This allows you to do things like watch a movie, download software, check your bank balance, post on social media, or make purchases, without having to wait for content to load.

The primary purpose of a content delivery network (CDN) is to reduce latency, or reduce the delay in communication created by a network's design. Because of the global and complex nature of the internet, communication traffic between websites (servers) and their users (clients) has to move over large physical distances. The communication is also two-way, with requests going from the client to the server and responses coming back.

A CDN improves efficiency by introducing intermediary servers between the client and the website server. These CDN servers manage some of the client-server communications. They decrease web traffic to the web server, reduce bandwidth consumption, and improve the user experience of your applications. 

Ref:https://www.akamai.com/our-thinking/cdn/what-is-a-cdn#:~:text=CDNs%20cache%20content%20like%20web,a%20CDN%20like%20an%20ATM.
Ref:https://imagekit.io/blog/what-is-content-delivery-network-cdn-guide/
Ref:https://aws.amazon.com/what-is/cdn/

4.Why is React known as React?
 many systems advertise some kind of reactivity, but they usually require that you set up some kind of point-to-point listeners and won’t work on structured data. This API reacts to any state or property changes, and works with data of any form (as deeply structured as the graph itself) .

Ref:https://reactjs.org/blog/2016/09/28/our-first-50000-stars.html#fbolt-is-born
Ref:https://www.quora.com/Why-is-React-called-React

5. What is crossorigin in script tag?
If we want React to be Served as a cdn link then crossorigin is recomended to be used .
The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.

Ref:https://reactjs.org/docs/cdn-links.html#why-the-crossorigin-attribute
Ref:https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin
Ref:https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

6. What is diference between React and ReactDOM
React and ReactDOM were only recently split into two different libraries. Prior to v0.14, all ReactDOM functionality was part of React. This may be a source of confusion, since any slightly dated documentation won't mention the React / ReactDOM distinction.

As the name implies, ReactDOM is the glue between React and the DOM. Often, you will only use it for one single thing: mounting with ReactDOM.render(). Another useful feature of ReactDOM is ReactDOM.findDOMNode() which you can use to gain direct access to a DOM element. (Something you should use sparingly in React apps, but it can be necessary.) If your app is "isomorphic", you would also use ReactDOM.renderToString() in your back-end code.

For everything else, there's React. You use React to define and create your elements, for lifecycle hooks, etc. i.e. the guts of a React application.

The reason React and ReactDOM were split into two libraries was due to the arrival of React Native. React contains functionality utilised in web and mobile apps. ReactDOM functionality is utilised only in web apps. [UPDATE: Upon further research, it's clear my ignorance of React Native is showing. Having the React package common to both web and mobile appears to be more of an aspiration than a reality right now. React Native is at present an entirely different package.]

See the blog post announcing the v0.14 release: https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html
Ref:    https://stackoverflow.com/questions/34114350/react-vs-reactdom

7. What is difference between react.development.js and react.production.js files via CDN?
Development mode includes useful warnings and gives you access to tools that make development and debugging easier

The production mode minifies your code, optimises assets, and produces lighter weight source maps. Also, the warning messages and other features present in development mode for debugging will be suppressed. As a result, the bundle size is drastically reduced and improves page load time. React recommends utilising the production mode while deploying the application.

The main advantages of production mode are:
Performance boost compared to Development mode
Represents the performance of your app on the end user’s device
Helps to catch bugs that only show up in production

Ref:https://www.copycat.dev/blog/reactjs-build-production/
ref:https://docs.expo.dev/workflow/development-mode/
ref:https://stackoverflow.com/questions/48151128/difference-between-production-and-development-build-in-reactjs

8.  What is async and defer? - see my Youtube video ;) https://www.youtube.com/watch?v=IrHmpdORLu8

Assignment2
===========
9. What is npm?
npm is the world's largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.
We need npm because to manage packages in our app, because React library alone is not sufficient to build a react app , To do this we need a lot of packages and those to be managed by npm . Alternative for npm is 'yarn'
To get npm inside our react app we just run "npm init" in the terminal to initialize npm inside our react-app . 
npm init creates package.json containing all metadata(dependencies names and versions, project entry point etc... ) of our project .

Ref:https://docs.npmjs.com/about-npm

10.What is `Parcel/Webpack`? Why do we need it?
Parcel and webpack are bundlers (these bundlers are packages with some piece of js codes or js libraries).
The job of a bundler is to ignite our app

11. What is `.parcel-cache`
This is the place which is created by parcel inside our project to perform its activity.
The .cache folder (or .parcel-cache in parcel v2) stores information about your project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. It's a key reason why parcel can be so fast in development mode. I think committing it to git would be a bad idea - it would add a large number of (unnecessary) changes to your commit history, and it could easily get out-of-sync with the code that generated it.
Ref:https://stackoverflow.com/questions/60695778/what-is-the-cache-folder-in-parcel-bundler-is-it-necessary-to-push-the-cache#:~:text=cache%20folder%20(or%20.,so%20fast%20in%20development%20mode.
12. What is `npx` ?

npx is also a CLI tool whose purpose is to make it easy to install and manage dependencies hosted in the npm registry.

It’s now very easy to run any sort of Node.js based executable that you would normally install via npm.

If you wish to execute a locally installed package, all you need to do is type:npx package-name

Ref:https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/

13. What is difference between `dependencies` vs `devDependencies`

The difference between these two, is that devDependencies are modules which are only required during development, while dependencies are modules which are also required at runtime.
To save a dependency as a devDependency on installation we need to do an npm install --save-dev package-name, instead of just an npm install package-name.
Ref:https://dev.to/ushashir/difference-between-devdependencies-and-dependencies-glj

14. What is Tree Shaking?

Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code.
It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.
Ref:https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking#:~:text=Tree%20shaking%20is%20a%20term,for%20use%20between%20JavaScript%20files.

15. What is Hot Module Replacement?

As you make changes to your code, Parcel automatically rebuilds the changed files and updates your app in the browser. By default, Parcel fully reloads the page, but in some cases it may perform Hot Module Replacement (HMR). HMR improves the development experience by updating modules in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things in your code.

CSS changes are automatically applied via HMR with no page reload necessary. This is also true when using a framework with HMR support built in, like React (via Fast Refresh), and Vue.
Ref:https://parceljs.org/features/development/#hot-reloading

16. List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.

- Hot Module Replacement - parcel uses HMR to reload the browser automatically on any code changes , small portion of that code changes instead of reloading the whole page
- Dev and production build - using parcel we can create development environment and production build individually
- Minify - it minifes the code 
- Image Optimization - compresses the image sizes 
- Caching while development 
17. - What is `.gitignore`? What should we add and not add into it?

A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; 
the files are autogenerated in server should be added to .gitignore file , which cant be auto generated those files need not added to .gitignore
Ref:https://git-scm.com/docs/gitignore
18. What is the difference between `package.json` and `package-lock.json`

If your project uses node package manager (NPM) you will have a package.json file somewhere in your code base.
The package.json file records the minimum version of different dependencies that your app needs. When a collaborator on the code does npm install the dependency versions installed will be those dictated in the package.json or a higher/more recent reversion. If you update the versions of a particular package, the change is not necessarily going to be reflected here.
The package.json file is used for more than just dependencies. It also is used to define project properties, descriptions, and license information.
Where the package.json file is used for a handful of different things, the package-lock.json file is solely used to "lock" dependencies to a specific version number, including minor and patch versions. It will ignore the ^ and the ~ of the package.json file. This file keeps track of the the exact version of each installed package which means that future installs will be able to build an identical dependency tree.
Ref:https://dev.to/salothom/package-json-vs-package-lock-json-do-you-need-both-1mjf

19. Why should I not modify `package-lock.json`?

It stores an exact, versioned dependency tree rather than using starred versioning like package.json itself (e.g. 1.0.*). This means you can guarantee the dependencies for other developers or prod releases, etc. It also has a mechanism to lock the tree but generally will regenerate if package.json changes.
Ref:https://stackoverflow.com/questions/44297803/what-is-the-role-of-the-package-lock-json
Ref:https://docs.npmjs.com/cli/v9/configuring-npm/package-lock-json

20. - What is `node_modules` ? Is it a good idea to push that on git?

You can think of the node_modules folder like a cache for the external modules that your project depends upon. When you npm install them, they are downloaded from the web and copied into the node_modules folder and Node.js is trained to look for them there when you import them (without a specific path). I refer to it as a cache because the node_modules folder can be entirely recreated from scratch at any time by just reinstalling all the dependent modules (that should be listed in your project folders).

but I know when we are going to upload it to github we have to ignore the node_modules folder because it takes a lot of space.

This is because there's no reason to store copies of all your dependent modules in your own GitHub project. The exact version you were using is known and stored in your package.json or package-lock.json so at any time you or anyone else using your project can download your code and then fetch all the other dependent modules from their original source (including even the exact same versions you were using). So, there isn't any reason to store a separate duplicate copy of all those dependent modules in your own project.
Ref:https://stackoverflow.com/questions/63294260/what-is-the-purpose-of-the-node-modules-folder#:~:text=You%20can%20think%20of%20the,(without%20a%20specific%20path).

21. What is the `dist` folder?

is the folder created by parcel by executing this cmd "npx parcel build index.html" to store production build files , where index.html is the starting point of the project.
Ref:https://create-react-app.dev/docs/production-build/

22. What is `browserlists`

This react configuration option is use to make our app compatible with a lot of browsers.
The config to share target browsers and Node.js versions between different front-end tools

Ref:https://stackoverflow.com/questions/55510405/what-is-the-significance-of-browserslist-in-package-json-created-by-create-react
Ref:https://www.npmjs.com/package/browserslist


